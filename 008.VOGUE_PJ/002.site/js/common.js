// 보그 코리아 공통 기능 JS - common.js //


// ■■■■■■■■■■■ 모바일 여부 구분 상태변수 (전역변수 : 다른데서 참조할 수 있게) ■■■■■■■■■■■
let mob = 0; // 1 모바일  /  0 모바일 아님
// 처음에 화면 사이즈로 상태값 업데이트함!

// 모바일 상태값 업데이트 함수 (새로고침 안하고도 정상 잘 나오게 위함)
/* 
      [ 코드풀이 ]
        왜 함수로 만들었을까?  let reFn = () => { ////// }
        ▶ 여러번 재사용 하려고!

        --------------------------------------------------------------------------------------------------------------

        아래서 왜 바로 호출했을까?
        reFn();
        ▶ 처음 페이지 로딩됬을때 이게 모바일사이즈에서 연건지, PC에서 연건지 확인을 해야하기 때문

        그럼 왜 또 아래 다시 호출했을까?
        $(window).resize(reFn);
        ▶ 처음 페이지열고 내가 가로폭을 줄일 수도 있고, 그럴때 얘가 자동적으로 리사이징해서 해당 함수 사용하기 위해서임.

        --------------------------------------------------------------------------------------------------------------

        그래서 이렇게 이처럼 위에서 2번 호출을 할때
        reFn 재사용 하려고 굳이 함수로 넣은거임
        그리고 또 필요한 시점에 실행하려고 하는 것도 있기 때문.

        먼저 정의를 내려야 아래에 호출할 수 있다.
        let reFn = () => { ////// } 먼저 정의 안하고,
        reFn(); 이것부터 썼다고 생각해보셈 (정의를 안했는데 호출이 되겠는가?)
        그러니 순서가 중요!
        정의부터 내린 후 -> 호출! 
*/
let reFn = () => {

   /* 제이쿼드로드구역에 들어갈 필요없음 - 윈도우의 가로값이 500px 이하이면 ~*/
   if ($(window).width() <= 500) {
      mob = 1;
      $("#top").removeClass("on");
      // 상단영역 변경 클래스 제거! (pc버전에서 스크롤 내리면 조금하게 상단영역으로 바뀌는거 안나오게 하기 (모바일일때))
   }
   /* 코드풀이 : 화면가로 사이즈가 500px 이하이면, mob값을 1으로 변경! (1은 모바일 / 0은 모바일아님!)  */
   else mob = 0;
   /* 코드풀이 : 그 밖의 경우엔 mob를 0으로! */

   console.log("모바일상태:" + mob);

}; ////////// reFn함수 ////////////////// (지금 저장만 함)


// 처음 페이지 로딩시, 최초 업데이트함수 호출!
reFn();

// 윈도우 사이즈 변경시, 업데이트함수 호출!
$(window).resize(reFn);
/* 
   resize() 메서드
   : 화면크기가 변경될 떄 
     발생하는 이벤트와 함수를 연결

*/



////////////////////////////// 제이쿼리 로드구역 ////////////////////////////////
$(function () { //////// jQB (제이쿼리 코드블록) //////////////////

   /* 페이지 새로 고침시 스크롤이 중간에 있으면
      브라우저 스크롤위치 캐싱(즉, 위치기억)에 의해서
      그 위치에 있게 되므로
      강제로 위로 보내는 코드를 넣어준다!
      CSS로 넣어주면 캐시 덮어써서 소용이 없다!

      그래서 animate로 넣어줌 (스크롤이 중간에 있건 새로고침하면, 다시 스크롤 맨 위로 올라가게 하는 설정)
   */
   $("html,body").animate({
      scrollTop: "0px"
   }, 100);


   /* ▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼▼

       [ 스크롤 이벤트 처리구역 설정하기 ]

         1. 스크롤이벤트는 스크롤바가 움직일때 발생한다.
            (마우스휠 이벤트와 다름! → 마우스휠을 움직였을때 좌우옆으로 움직이게 하는 것도 있기 때문)

         2. 제이쿼리에서 scroll() 메서드로 구현함
         3. 스크롤바의 위치값은 scrollTop() 메서드로 알아낸다!

      ▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲▲
   */


   // ■■■■■■■■■■■■■■■■■■■■■■ 공용 저장공간 (함수바깥에 있으니, 참조할 수 있음) ■■■■■■■■■■■■■■■■■■■■■■■■
   // 공용저장공간 : 완벽한 전역변수는 아니다. 왜냐하면 위로 올려보면 function안에 또 담겨있기 때문이다.
   //               하지만, 아래에서 봤을때는 바깥이니까 애매하지만 전역이라고 칭해줌


   // 스크롤 위치 변수(바깥에 하고 할당만 하게끔 바깥에 하자)
   let scTop;

   // 스크롤 실행상태 변수 (상단GNB 영역)
   let scSts = 1; //  실행전 1  /  실행후 0


   // 스크롤 실행상태 변수 2 (탑버튼임! 위로올라가기버튼) 
   let scSts2 = 1; //  실행전 1  /  실행후 0

   // 상단영역 요소 
   let tm = $("#top");


   //// 위로 이동버튼 요소 ////
   //   대상 : .tbtn
   let tbtn = $(".tbtn"); /* $(".tbtn") >>> html .tbtn 선택한거임 제이쿼리로 */
   // tbtn.hide(); // 숨기기인데 안하는 이유는 페이지 새로고침하면 짧은 사이에 보여서임 (common.css에서 걍 .tbtn 에다가 display: none;)

   // ■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


   ////////////// 전체 스크롤의 대상은 화면이므로 window 객체(그래서 따옴표 안쌈) 사용한다!
   $(window).scroll(function () {


      /*****************************************************
        1. 전체 스크롤 위치값 알아내기 
             1) scrollTop() 메서드 : 세로스크롤 위치값
             2) scrollLeft() 메서드 : 가로스크롤 위치값
      ******************************************************/
      scTop = $(this).scrollTop();
      console.log("스크롤위치: " + scTop);



      // 1. 상단이동버튼 보이기 숨기기 
      //    대상 : .tbtn -> tbtn 변수에 할당! (펑셩밖에 변수할당함 -> 위로 이동버튼 요소)
      //    기준위치 : 300px 스크롤 위치 
      if (scTop >= 300 && scSts2 === 1) { // 스크롤 위치가 300px보다 크거나 같고(이상), scSts2값이 1이면 들어올 수 있음
         scSts2 = 0; // 한번만 쓰려고 값 바꿈!
         console.log("탑버튼 보여!");

         tbtn.fadeIn(300); // 쓱~ 보여 (오퍼시티 투명도를 바꾸는 속성)

      } ///////////// if //////////
      else if (scTop < 300 && scSts2 === 0) { // 스크롤 위치가 300px 미만이고, scSts2값이 0이면 들어올 수 있음
         scSts2 = 1; // 한번만 쓰려고 값 바꿈!
         console.log("탑버튼 숨겨!");

         tbtn.fadeOut(300); // 쓱~ 숨겨
      } ///////////// else if //////////



      ////////////***************** */ 모바일일때 돌아가! *************************////////////
      if (mob) return;
      // mob===1 일때 true 처리된다!
      /* 
         function(함수) 을 빠져나가는게 return! 
         제어문을 빠져나가는건 break! 
      */
      // 위에 있는 top버튼 보이기/숨기기는 실행됨! (모바일에서도! -> 작은 위로가기버튼이 여기서도 보여야하기때문)
      /* 
         여기서 리턴을 주면 바로 위에 1.상단이동버튼 보이기 숨기기 위에는 적용되고,
         함수를 빠져나간다. 
         (쉽게 생각해서 그냥 1이면 여기까지가 코드가 있고, 아래는 없다고 생각하면 위에 코드까지는 적용되는건 당연한것)
      
      */


      // 2. 상단영역(#top)이 스크롤위치값 100px 이상일때
      //    -> #top에 .on을 넣어서 상단영역 디자인 변경하기
      //    대상 : #top -> 변수 tm에 할당!
      if (scTop >= 100 && scSts === 1) {
         /* 스크롤 위치가 100px보다 크거나 같거나(이상), scSts값이 1이면 들어올 수 있음 */
         /* && 둘다 트루나야함 들어올 수 있음 */
         /* 실행1이 한번만 실행되면되지, 계속 실행이 될필요는 없으니 추가로 해준다.
            (위에서 "스크롤 실행상태 변수(공용저장공간 / 펑셩밖)" 처리하고, 그변수값 1이 해당코드에서 scSts === 1 이니 동일한 1이라서 들어오고, 들어오면 값 0으로 바꿈 ) */

         scSts = 0; // 한번밖에 못들어옴! (1이 0으로 바꿨기 때문에.)
         console.log("실행1"); /* 스크롤 100px 내려왔을때 - 작은 GNB 영역 보이는 상태 */
         tm.addClass("on") // common.css에서 설정한 on 상태가 추가되서 보임

      } /////////////// if ///////////
      else if (scTop < 100 && scSts === 0) { // 스크롤 위치가 100px 미만이고, scSts값이 0이면 들어올 수 있음
         /* 실행2가 계속 실행되니, 이것또한 같이 설정하자. 
            그럼 위에서 0으로 값바꾼게 내려오고 (scSts === 0 이것은 위에서 if문에서 scSts = 0; 을 했기 때문에 0으로 바꾼 값이 반대경우니까 해당되서 내려옴)
            이게 한번밖에 못들어오게 1로 바꿔서 잠궈줌
         */

         scSts = 1; // 한번밖에 못들어옴! (0을 1로 바꿈!)
         console.log("실행2"); /* 처음에 GNB 영역 다 보이는 상태 */
         tm.removeClass("on") // common.css에서 설정한 on 상태가 제거되서 안보임
      } /////////////// else //////


   }); /////////////// scroll //////////////////
   /////////////////////////////////////////////



   /// 탑버튼 이동 구현하기
   //  대상 : .tbtn === tbtn 변수
   tbtn.click(function (e) { // e-이벤트 전달변수

      // 기본 이동막기 (버벅거리는것 a요소 자체속성)
      e.preventDefault();
      // ▶ 참고자료 : linksys.js ->> 2. GNB 메뉴 링크 연결하기 > 1. 기본 이동속성 막기

      // 맨 위로 이동하기
      // 변경대상 : html,body 두가지 모두!
      $("html,body").animate({
         scrollTop: "0px"
      }, 1000, "easeInOutQuart"); /* easeInOutQuart는 https://easings.net/ko 에서 모션 보고 맘에 드는걸 선택한것 */

   }); ////// click /////////////



   //***************************** 모바일코드 **********************************/

   // 햄버거버튼 클릭시 메뉴 보이기 / 숨기기
   // 이벤트대상 : .hbtn - 햄버거버튼
   // 변경대상 : #mobx - 모바일 메뉴박스
   $(".hbtn").click(function (e) {

      // 기본이동막기
      e.preventDefault();

      // 모바일 메뉴 슬라이드 애니메이션
      $("#mobx").slideToggle(600,"easeInOutQuint"); /* easeInOutQuint : 이징 */
      $("#top").toggleClass("hv");
      /* 
         toggleClass(클래스명)
         해당클래스가 없으면 넣고, 있으면 뺌!

         ▶ .toggleClass("hv")
             : media.css 에서 생성한 >> #top.hv 클래스를 없으면 넣고, 있으면 뺌!
               즉, .hv 클래스는 이미 #top의 높이값을 100vh로 설정한 클래스임!
      */
      /* 
            [ slideToggle(시간,이징,함수) ]
              토글(toggle)은 두가지 기능 겸하는 것을 말함 (slideUp / slideDown이 왔다갔다 함)
              
              확장
              : toggle(시간,이징,함수) -> show / hide 왔다갔다 하는 것.
              : fadeToggle(시간,이징,함수) -> fadeIn / fadeOut 을 왔다갔다 하는 것.
                                             오파시티가 fadeIn (1 = 보이는것) -> fadeOut (0 = 투명)

              ▷ 참고자료 : 004.jQuery학습\001.기본사용법\002.선택자메서드연습\jQuery-02.메서드연습 >> 45.slideDown_slideUp.html
      */

   }); ///////////// click /////////////////////////////////////

   /// 검색버튼 클릭시 검색창 보이기 / 숨기기
   //  이벤트 대상 : .sbtn - 검색버튼
   //  변경대상 : .mos - 검색창 박스
   $(".sbtn").click(function(e){

      // 기본이동막기
      e.preventDefault();

      // 검색창 보이기/숨기기 : slideToggle()
      $(".mos").slideToggle(300,"easeOutQuint"); /* easeOutQuint : 이징 */


   }); ////////////// click ////////////////



}); ////////// jQB ///////////////////////////////////////////////////////////////